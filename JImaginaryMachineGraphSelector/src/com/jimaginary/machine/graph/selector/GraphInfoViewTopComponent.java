/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jimaginary.machine.graph.selector;

import com.jimaginary.machine.api.GraphData;
import java.util.Collection;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.jimaginary.machine.graph.selector//GraphInfoView//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "GraphInfoViewTopComponent",
        iconBase = "com/jimaginary/machine/graph/selector/Question-16.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "com.jimaginary.machine.graph.selector.GraphInfoViewTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_GraphInfoViewAction",
        preferredID = "GraphInfoViewTopComponent"
)
@Messages({
    "CTL_GraphInfoViewAction=GraphInfoView",
    "CTL_GraphInfoViewTopComponent=GraphInfoView Window",
    "HINT_GraphInfoViewTopComponent=This is a GraphInfoView window"
})
public final class GraphInfoViewTopComponent extends TopComponent 
        implements LookupListener {

    public GraphInfoViewTopComponent() {
        initComponents();
        setName(Bundle.CTL_GraphInfoViewTopComponent());
        setToolTipText(Bundle.HINT_GraphInfoViewTopComponent());
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelTitle = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaContents = new javax.swing.JTextArea();

        jLabelTitle.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabelTitle, org.openide.util.NbBundle.getMessage(GraphInfoViewTopComponent.class, "GraphInfoViewTopComponent.jLabelTitle.text")); // NOI18N

        jTextAreaContents.setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.background"));
        jTextAreaContents.setColumns(20);
        jTextAreaContents.setLineWrap(true);
        jTextAreaContents.setRows(5);
        jTextAreaContents.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextAreaContents.setEnabled(false);
        jScrollPane2.setViewportView(jTextAreaContents);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextAreaContents;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        result = Utilities.actionsGlobalContext().lookupResult(SelectionListItem.class);
        result.addLookupListener (this);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    private Lookup.Result<SelectionListItem> result = null;

    @Override
    public void resultChanged(LookupEvent lookupEvent) {
        Collection<? extends SelectionListItem> allItems = result.allInstances();
        if (!allItems.isEmpty()) {
            SelectionListItem node = allItems.iterator().next();
            jLabelTitle.setText(node.getName());
            GraphData.setNodeName(node.getName());
            jTextAreaContents.setText(node.getDescription());
        } else {
            jLabelTitle.setText("[no selection]");
            jTextAreaContents.setText("");
        }
    }
}
