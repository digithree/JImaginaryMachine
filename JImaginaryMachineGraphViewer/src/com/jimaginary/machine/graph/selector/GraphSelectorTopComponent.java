/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jimaginary.machine.graph.selector;

import java.awt.BorderLayout;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.InstanceContent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.jimaginary.machine.graph//GraphSelector//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "GraphSelectorTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "com.jimaginary.machine.graph.GraphSelectorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_GraphSelectorAction",
        preferredID = "GraphSelectorTopComponent"
)
@Messages({
    "CTL_GraphSelectorAction=GraphSelector",
    "CTL_GraphSelectorTopComponent=GraphSelector Window",
    "HINT_GraphSelectorTopComponent=This is a GraphSelector window"
})
public final class GraphSelectorTopComponent extends TopComponent
            implements ExplorerManager.Provider {

    private final InstanceContent content = new InstanceContent();
    private final ExplorerManager mgr = new ExplorerManager();
    //private final GraphTypeNodeFactory gtpHead;
    
    //private final DummySaveNode dummySaveNode;
    
    public GraphSelectorTopComponent() {
        initComponents();
        setName(Bundle.CTL_GraphSelectorTopComponent());
        setToolTipText(Bundle.HINT_GraphSelectorTopComponent());

        /*
        gtpHead = new GraphTypeNodeFactory().setName("Graph Types");
        gtpHead.addChild(new GraphTypeNodeFactory().setName("Midi Phrase Builder(Modal)"));
        gtpHead.addChild(new GraphTypeNodeFactory().setName("Midi Phrase Structurer"));
        gtpHead.addChild(new GraphTypeNodeFactory().setName("PCM Cutter"));
        gtpHead.addChild(new GraphTypeNodeFactory().setName("Gamelan Phrase Builder"));
        */
        
        associateLookup(ExplorerUtils.createLookup(mgr, getActionMap()));
        //associateLookup(new AbstractLookup(content));

        setLayout(new BorderLayout());
        add(new BeanTreeView(), BorderLayout.CENTER);

        setDisplayName("Graph Selector");
        
        //mgr.setRootContext(new AbstractNode(Children.create(gtpHead, true)));
        mgr.setRootContext(new SelectionListItemNode());
        //mgr.setRootContext(new DummySaveNode());
        
        //setActivatedNodes(new Node[]{dummySaveNode = new DummySaveNode()});
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 199, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 295, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return mgr;
    }
}
