/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.jimaginary.machine.graph.params;

import com.jimaginary.machine.graph.viewer.ParameterPropertyEditor;
import com.jimaginary.machine.math.MathFunction;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author simonkenny
 */
public class ProbTableSlidersParamPropertyPanel extends javax.swing.JPanel implements ChangeListener {
    
    private final MathFunction mathFunc;
    private final ParameterPropertyEditor editor;
    
    private final javax.swing.JLabel jLabelParams[];
    private final javax.swing.JTextField jTextFieldParams[];
    private final javax.swing.JSlider jSliderParams[];
    
    private boolean autoValidate;
    private boolean sqrtScale;
    private boolean freezeSliderUpdate;
    
    /**
     * Creates new form ProbTableSlidersParamPropertyPanel
     */
    public ProbTableSlidersParamPropertyPanel(String []idxNames, MathFunction mathFunc, ParameterPropertyEditor editor) {
        initComponents();
        this.editor = editor;
        this.mathFunc = mathFunc;
        autoValidate = false;
        sqrtScale = true;
        freezeSliderUpdate = false;
        int numParameters = mathFunc.getNumParameters();
        jLabelParams = new javax.swing.JLabel[numParameters];
        jTextFieldParams = new javax.swing.JTextField[numParameters];
        jSliderParams = new javax.swing.JSlider[numParameters];
        
        jPanelForComponents.setLayout(new GridBagLayout());
        
        for( int i = 0 ; i < mathFunc.getNumParameters() ; i++ ) {
            String name = idxNames != null ? idxNames[i] : mathFunc.getParamName(i);
            float val = mathFunc.getParameter(i);
            System.out.println("Adding param, name: "+name+", val: "+val);
            {
                jLabelParams[i] = new javax.swing.JLabel(name);
                jLabelParams[i].setPreferredSize(new Dimension(100,25));
                GridBagConstraints constraints = new GridBagConstraints();
                constraints.fill = GridBagConstraints.HORIZONTAL;
                constraints.gridx = 0;
                constraints.gridy = i;
                jPanelForComponents.add(jLabelParams[i], constraints);
            }
            {
                jTextFieldParams[i] = new javax.swing.JTextField();
                jTextFieldParams[i].setText(""+val);
                jTextFieldParams[i].setEditable(false);
                jTextFieldParams[i].setPreferredSize(new Dimension(100,25));
                GridBagConstraints constraints = new GridBagConstraints();
                constraints.fill = GridBagConstraints.HORIZONTAL;
                constraints.gridx = 1;
                constraints.gridy = i;
                jPanelForComponents.add(jTextFieldParams[i], constraints);
            }
            {
                jSliderParams[i] = new javax.swing.JSlider();
                if( sqrtScale ) {
                    jSliderParams[i].setValue((int)(Math.sqrt(val)*100.f));
                } else {
                    jSliderParams[i].setValue((int)(val*100.f));
                }
                GridBagConstraints constraints = new GridBagConstraints();
                constraints.fill = GridBagConstraints.HORIZONTAL;
                constraints.gridx = 2;
                constraints.gridy = i;
                jPanelForComponents.add(jSliderParams[i], constraints);
                jSliderParams[i].addChangeListener(this);
            }
            
        }
        jPanelForComponents.revalidate();
        /*
        if( (this.getSize().height-50) < (jLabelParam0.getLocation().y+(numParameters*SPACING_Y)) ) {
            this.setSize(this.getSize().width, (jLabelParam0.getLocation().y+(numParameters*SPACING_Y)));
        }
        */
        validate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButtonValidate = new javax.swing.JToggleButton();
        jPanelForComponents = new javax.swing.JPanel();
        jCheckBoxScaleSqrt = new javax.swing.JCheckBox();
        jZero = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ProbTableSlidersParamPropertyPanel.class, "ProbTableSlidersParamPropertyPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButtonValidate, org.openide.util.NbBundle.getMessage(ProbTableSlidersParamPropertyPanel.class, "ProbTableSlidersParamPropertyPanel.jButtonValidate.text")); // NOI18N
        jButtonValidate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValidateActionPerformed(evt);
            }
        });

        jPanelForComponents.setBackground(new java.awt.Color(255, 255, 255));
        jPanelForComponents.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanelForComponentsLayout = new javax.swing.GroupLayout(jPanelForComponents);
        jPanelForComponents.setLayout(jPanelForComponentsLayout);
        jPanelForComponentsLayout.setHorizontalGroup(
            jPanelForComponentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 527, Short.MAX_VALUE)
        );
        jPanelForComponentsLayout.setVerticalGroup(
            jPanelForComponentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 338, Short.MAX_VALUE)
        );

        jCheckBoxScaleSqrt.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxScaleSqrt, org.openide.util.NbBundle.getMessage(ProbTableSlidersParamPropertyPanel.class, "ProbTableSlidersParamPropertyPanel.jCheckBoxScaleSqrt.text")); // NOI18N
        jCheckBoxScaleSqrt.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBoxScaleSqrtStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jZero, org.openide.util.NbBundle.getMessage(ProbTableSlidersParamPropertyPanel.class, "ProbTableSlidersParamPropertyPanel.jZero.text")); // NOI18N
        jZero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jZeroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelForComponents, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCheckBoxScaleSqrt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jZero)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonValidate))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelForComponents, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonValidate)
                    .addComponent(jCheckBoxScaleSqrt)
                    .addComponent(jZero))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonValidateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValidateActionPerformed
        validateParameters();
    }//GEN-LAST:event_jButtonValidateActionPerformed

    private void jCheckBoxScaleSqrtStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBoxScaleSqrtStateChanged
        sqrtScale = !sqrtScale;
        updateSliders();
    }//GEN-LAST:event_jCheckBoxScaleSqrtStateChanged

    private void jZeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jZeroActionPerformed
        zeroParameters();
    }//GEN-LAST:event_jZeroActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton jButtonValidate;
    private javax.swing.JCheckBox jCheckBoxScaleSqrt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanelForComponents;
    private javax.swing.JButton jZero;
    // End of variables declaration//GEN-END:variables

    @Override
    public void stateChanged(ChangeEvent e) {
        if( !freezeSliderUpdate ) {
            if( e.getSource() instanceof javax.swing.JSlider ) {
                for( int i = 0 ; i < mathFunc.getNumParameters() ; i++ ) {
                    if( (javax.swing.JSlider)e.getSource() == jSliderParams[i] ) {
                        float val = (float)((javax.swing.JSlider)e.getSource()).getValue() / 100.f;
                        if( sqrtScale ) {
                            val *= val;
                        }
                        mathFunc.setParameter(i, val);
                        jTextFieldParams[i].setText(""+val);
                    }
                }
            }
            editor.setAsText(mathFunc.toString());
        }
    }
    
    private void updateSliders() {
        freezeSliderUpdate = true;
        for( int i = 0 ; i < mathFunc.getNumParameters() ; i++ ) {
            float val = mathFunc.getParameter(i);
            if( sqrtScale ) {
                jSliderParams[i].setValue((int)(Math.sqrt(val)*100.f));
            } else {
                jSliderParams[i].setValue((int)(val*100.f));
            }
            jTextFieldParams[i].setText(""+val);
        }
        freezeSliderUpdate = false;
    }
    
    private void validateParameters() {
        float sum = 0.f;
        for( int i = 0 ; i < mathFunc.getNumParameters() ; i++ ) {
            sum += mathFunc.getParameter(i);
        }
        if( sum == 0.f ) {
            float val = 1.f / (float)mathFunc.getNumParameters();
            for( int i = 0 ; i < mathFunc.getNumParameters() ; i++ ) {
                mathFunc.setParameter(i, val);
            }
        } else {
            float scaleFactor = 1.f / sum;
            for( int i = 0 ; i < mathFunc.getNumParameters() ; i++ ) {
                mathFunc.setParameter(i, mathFunc.getParameter(i)*scaleFactor);
            }
        }
        editor.setAsText(mathFunc.toString());
        updateSliders();
    }
    
    private void zeroParameters() {
        for( int i = 0 ; i < mathFunc.getNumParameters() ; i++ ) {
            mathFunc.setParameter(i, 0.f);
        }
        editor.setAsText(mathFunc.toString());
        updateSliders();
    }
}
